const employeeSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true
      },
    name: {
        type: String,
        required: [true, "Please fill the details"]
    },
    email:{
        type: String,
        required: [true],
        unique: true
      },
    password: String,
    contact:
    {
        type: String,
        validate: {
        validator: function(v) {
            return /\d{10}/.test(v);
          },
          message: props => `${props.value} is not a valid phone number!`
        },
        required: [true, 'User phone number required']
    },
    role: {
     type: String,
     enum: ['developer', 'tester', 'admin']
    },
    project: String,
});


const bugSchema = new mongoose.Schema({
    bugId: {
      type: String,
      required: [true, "Please fill the details"],
      unique: true
    },
    projectId: {
      type: String,
      required: true,
      unique: true
    },
    project: {
        type : String,
        required : [true, "Please fill the details"]
    },
    category:{
        type : String,
    },
    severity : {
     type : String,
     enum : ['Low', 'Medium', 'High'],
    },
    status:
    {
        type: String,
        enum: ["to do", "in progress", "in review", "fixed"]
    },
    reportedBy:
    {
        type: employeeSchema
    },
    assignedTo:{
        type: employeeSchema
    },
    openedDate: {
      type: String
    },
    dueDate: {
       type: String
    },
    description:{
       type: String
    }
});

const requestSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true},
  name: {
      type: String,
      required: [true, "Please fill the details"]
  },
  email:{
      type: String,
      required: [true]
    },
  password: String,
  contact:
  {
      type: String,
      validate: {
      validator: function(v) {
          return /\d{10}/.test(v);
        },
        message: props => `${props.value} is not a valid phone number!`
      },
      required: [true, 'User phone number required']
  },
  role: {
   type: String,
   enum: ['developer', 'tester', 'admin'],
  },
})
